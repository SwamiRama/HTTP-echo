{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "Template for an HTTP Echo server",
  
  "Parameters" : {
      
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },    

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type *deprecated*",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "AMI" : {
      "Description" : "AMI to use",
      "Type" : "String",
      "Default" : "ami-0fc61db8544a617ed",
      "ConstraintDescription" : "must be a valid AMI."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    } 
  },
  
  "Mappings" : {  },
    
  "Resources" : {     
      
    "WebServerInstance": {  
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "Initialize", "Install", "Configure" ]
          },
          "Initialize" : {
            "commands" : {
              "00_enable_php7" : {
                "command" : "amazon-linux-extras enable php7.2"
              }

            }
          },
          "Install" : {
            "packages" : {
              "yum" : {
                "httpd"        : [],
                "php"          : []
              }
            },
            "sources" : {
              "/tmp" : "https://codeload.github.com/shalomc/HTTP-echo/zip/master"
            },

            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/httpd/conf.d/echo.conf" : {
                "content" : { "Fn::Join" : [ "", [
					"<VirtualHost *:80>\n",
					"   AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript application/json\n",
					"   ServerSignature Off\n",
					"   DocumentRoot /var/www/html\n",
					"   <Directory \"/var/www/html\">\n",
					"      Options FollowSymLinks\n",
					"      Order allow,deny\n",
					"      Allow from all\n",
					"      RewriteEngine on\n",
					"      RewriteRule (.*) echo.php\n",
					"   </Directory>\n",
					"</VirtualHost>\n"
                ]]},
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/root/setup_echo.sh" : {
                "content" : { "Fn::Join" : ["", [
                          "#!/bin/bash\n",
                          "curl -sS https://getcomposer.org/installer | sudo php\n",
                          "mv composer.phar /usr/bin/composer\n",
                          "chmod +x /usr/bin/composer\n",
                          "export COMPOSER_HOME=/root\n",
                          "cp -R /tmp/HTTP-echo-master/* /var/www/html/\n",
                          "yes | cp /tmp/HTTP-echo-master/.htaccess /var/www/html/\n",
                          "yes | rm /etc/httpd/conf.d/welcome.conf\n",
                          "cd /var/www/html/\n",
                          "composer\n",
                          "chmod -R 644 .\n",
                          "chmod -R +x .\n",
                          "service httpd restart\n"

                ]]},
                "mode"    : "000700",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource WebServerInstance ",
                  "         --configsets InstallAndRun ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
            },

            "services" : {
              "sysvinit" : {  
                "httpd"   : { "enabled" : "true", "ensureRunning" : "true" },
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },

          "Configure" : {
            "commands" : {
              "00_enable_extra_packages" : {
                "command" : "amazon-linux-extras enable php7.2"
              },
              "04_install_echo_for_php" : {
                "command" : "/root/setup_echo.sh"
              }

            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Ref" : "AMI" },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServerInstance ",
             "         --configsets InstallAndRun ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServerInstance ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}        
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      }
    },
    
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }      
    }          
  },
  
  "Outputs" : {
    "BaseWebsiteURL" : {
      "Description" : "Name for newly created web server",
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebServerInstance", "PublicDnsName" ]}]] }
    },
    "ConnectionStrings" : {
      "Description" : "ssh conection strings",
      "Value" : { "Fn::Join" : ["", ["putty -ssh -i \"c:\\dev\\keys\\" , { "Ref" : "KeyName" }, ".ppk\"", "  ec2-user@", { "Fn::GetAtt" : [ "WebServerInstance", "PublicDnsName" ]} ]] }
    }

  }
}

